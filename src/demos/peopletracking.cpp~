#include <iostream>
#include <opencv2/opencv.hpp>

// help http://www.pyimagesearch.com/2015/11/09/pedestrian-detection-opencv/
using namespace cv;
using namespace std;

int
main(int argc, char** argv) {
	int 			k;
	VideoCapture 		capture;
	HOGDescriptor 		hog;
	Mat 			frame;
	Mat			gray_frame;
	Mat 			previous_frame; 
	Mat			diff_frame;
	static vector<float>    detector		=	HOGDescriptor::getDefaultPeopleDetector();
	string 			detectionWindowName 	= 	"Display window";
	string 			diffWindowName 		= 	"Diff window";


	
	if (argc != 2) {
		cout << "Usage: " << argv[0] << "input_filename" << endl;
	} 
	else {
		capture.open(argv[1]);
		
		if ( !capture.read(frame) )
		{
			cout << "Failled to capture frame" << endl << "Leaving" << endl;
		}
		else {
			if( frame.empty() ) {
				cout << "Failled to capture frame" << endl << "Leaving" << endl;
			}
			cvtColor(frame, previous_frame, CV_RGB2GRAY);
			namedWindow( detectionWindowName, WINDOW_AUTOSIZE );
		
			hog.setSVMDetector(HOGDescriptor::getDefaultPeopleDetector());
			if ( ! capture.isOpened() ) {
        	        cerr << "Error opening video capture from file " << argv[1] << endl << "Leaving" << endl;
			} 
			else {
				vector<Rect> found, found_filtered;
				while ( capture.read(frame) ) {
					if( frame.empty() ) {
						cout << "Failled to capture frame" << endl << "Leaving" << endl;
						break;
					}
					diff_frame = frame-previous_frame;
					frame.copyTo(previous_frame);


				
					Mat resizedFrame;
					resize(frame, resizedFrame, Size(), 1, 1);
					frame = resizedFrame;

					//hog.detectMultiScale(frame, found, 0, Size(), Size(), 1.05, 1);
					groupRectangles(found, 0, 0.5);
				
					for (size_t i=0; i<found.size(); i++) 
					{
						Rect r = found[i];
						rectangle(frame, r.tl(), r.br(), Scalar(0,255,0), 3);
					}	

					imshow(detectionWindowName, frame);
					imshow(diffWindowName, diff_frame);
					k = waitKey(10);
					if( (char)k == 27 ) {
						break;
					}
				}

			}
		}
	}	
	return 0;
}
